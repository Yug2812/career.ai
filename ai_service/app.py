from flask import Flask, request, jsonify
from flask_cors import CORS
import pandas as pd
import joblib
import os
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import random

try:
    import aiml
    AIML_AVAILABLE = True
except ImportError:
    AIML_AVAILABLE = False

# Initialization
app = Flask(__name__)
CORS(app)
API_PREFIX = '/api'
MODEL_PATH = os.path.join(os.path.dirname(__file__), 'model.pkl')
DATASET_PATH = os.path.join(os.path.dirname(__file__), 'career_suggestions_5000.csv')

# Global variables
ml_model = None
ml_feature_columns = [f'Q{i}' for i in range(1, 13)]

# Initialize AIML Kernel
aiml_kernel = None
if AIML_AVAILABLE:
    try:
        aiml_path = os.path.join(os.path.dirname(__file__), "aiml/career.aiml")
        if os.path.exists(aiml_path):
            aiml_kernel = aiml.Kernel()
            aiml_kernel.learn(aiml_path)
            aiml_kernel.setPredicate("name", "CareerGuide")
            print("AIML kernel loaded.")
        else:
            print(f"AIML file not found at {aiml_path}")
            aiml_kernel = None
    except Exception as e:
        print(f"AIML load failed: {e}")
        aiml_kernel = None

def load_model_if_exists():
    global ml_model
    if os.path.exists(MODEL_PATH):
        try:
            ml_model = joblib.load(MODEL_PATH)
            print("ML model loaded successfully.")
        except Exception as e:
            print(f"Failed to load ML model: {e}")
            ml_model = None
    else:
        print("No pre-trained model found at", MODEL_PATH)

load_model_if_exists()

@app.route(f'{API_PREFIX}/ml/train', methods=['POST'])
def ml_train():
    if not os.path.exists(DATASET_PATH):
        return jsonify({'success': False, 'message': f'Dataset not found at {DATASET_PATH}'}), 404
    try:
        df = pd.read_csv(DATASET_PATH)
        X = df[ml_feature_columns]
        y = df['Career1']
        preprocessor = ColumnTransformer(
            transformers=[('cat', OneHotEncoder(handle_unknown='ignore'), ml_feature_columns)],
            remainder='passthrough'
        )
        pipeline = Pipeline(steps=[
            ('preprocessor', preprocessor),
            ('classifier', RandomForestClassifier(n_estimators=100, random_state=42))
        ])
        pipeline.fit(X, y)
        joblib.dump(pipeline, MODEL_PATH)
        global ml_model
        ml_model = pipeline
        print(f"Model trained successfully and saved to {MODEL_PATH}")
        return jsonify({'success': True, 'message': 'Model trained and saved successfully.'})
    except Exception as e:
        print(f"Error during model training: {e}")
        return jsonify({'success': False, 'message': f'Model training failed: {str(e)}'}), 500

@app.route(f'{API_PREFIX}/quiz/submit', methods=['POST'])
def quiz_submit():
    data = request.get_json(force=True, silent=True) or {}
    user_id = data.get('userId')
    answers = data.get('answers', {})

    if not user_id:
        return jsonify({'success': False, 'message': 'Missing userId'}), 400

    if not ml_model:
        return jsonify({'success': False, 'message': 'ML model not trained. Please train the model first by sending a POST request to /api/ml/train.'}), 503

    try:
        input_df = pd.DataFrame([answers], columns=ml_feature_columns)
        prediction = ml_model.predict(input_df)[0]

        # --- NEW LOGIC TO PREVENT DUPLICATES AND LIMIT TO 3 ---
        recommendations = [prediction]
        fallback_careers = ['Software Developer', 'Data Scientist', 'AI Engineer', 'Product Manager', 'Cloud Engineer']
        
        for career in fallback_careers:
            if len(recommendations) >= 3:
                break
            if career not in recommendations:
                recommendations.append(career)
        # --- END OF NEW LOGIC ---

        results = {
            'recommendations': recommendations,
            'skillReadiness': random.randint(45, 90),
            'targetCareer': prediction,
            'rawAnswers': answers
        }
        
        return jsonify({'success': True, 'message': 'Recommendations generated by the ML model.', 'results': results})
    except Exception as e:
        print(f"Error during prediction: {e}")
        return jsonify({'success': False, 'message': f'Prediction failed: {str(e)}'}), 500

@app.route(f'{API_PREFIX}/resume/analyze', methods=['POST'])
def resume_analyze():
    data = request.get_json(force=True, silent=True) or {}
    user_id = data.get('userId')
    file_name = data.get('fileName', 'resume.pdf')

    if not user_id:
        return jsonify({ 'success': False, 'message': 'Missing userId' }), 400

    score = random.randint(60, 95)
    feedback = [
        { 'item': 'Targeted Keywords Match', 'score': 'Excellent' if score > 80 else 'Good' },
        { 'item': 'Formatting & Readability', 'score': 'Excellent' },
        { 'item': 'Experience Depth', 'score': 'Needs work' },
        { 'item': 'Action Verb Usage', 'score': 'Good' },
    ]
    return jsonify({ 'success': True, 'message': f'Analysis complete for {file_name}.', 'score': score, 'feedback': feedback })

@app.route(f'{API_PREFIX}/chatbot/query', methods=['POST'])
def chatbot_query():
    data = request.get_json(force=True, silent=True) or {}
    user_id = data.get('userId')
    query = data.get('query', '')

    if not user_id:
        return jsonify({ 'success': False, 'message': 'Missing userId' }), 400

    normalized = query.lower().strip()
    response = None
    intents = [
        (['salary', 'pay', 'ctc', 'package'], 'Salaries vary by region and seniority. For a strong estimate, check recent reports on Levels.fyi or Glassdoor.'),
        (['roadmap', 'path', 'how to become'], 'A reliable roadmap is: 1) Fundamentals, 2) Core tools, 3) Portfolio projects, 4) Mock interviews, 5) Targeted applications.'),
        (['skills', 'learn'], 'Prioritize problem-solving, a primary language (like Python/JS), data handling (SQL), and a cloud platform.'),
        (['resume', 'cv'], 'Keep it to one page if you are a junior. Use action verbs and quantify your impact.'),
        (['interview', 'prepare'], 'Practice daily with timed exercises, prepare STAR stories for behavioral questions, and do mock interviews.')
    ]
    for keys, text in intents:
        if any(k in normalized for k in keys):
            response = text
            break

    if aiml_kernel and not response:
        try:
            response = aiml_kernel.respond(query.strip())
        except Exception as e:
            print(f"AIML respond failed: {e}")
    
    if not response:
        response = f'I see you asked about "{query}". It is a good practice to explore foundational courses and build a small project to gain practical exposure.'

    return jsonify({ 'success': True, 'response': response })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=True)